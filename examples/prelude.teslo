(ns prelude)

;; assumes: quote, atom, =, cons, head, tail, cond, def, defn, ns, fn

(defn (identity x) x)

(def nil '())

(defn (nil? l) (= l nil))

(defn (if c t f) (cond (c t)
                       (true f)))

;;(let (x 1) x) => ((fn (x) x) 1)
(defn (let (x y) b) `((fn (~x) ~b) ~y))

;;(defn (map f (x xs_)) (cons (f x) (map f xs)))

;;(defn (filter p (x xs_)) (if (p x) (cons x (filter p xs)) ))
