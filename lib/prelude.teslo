(def defm (macro (name signature body) `(def ~name (macro ~signature ~body))))

(defm defn (name . signatures) `(def ~name (fn ~@signatures)))

(defm deft (tname . params) `(def ~tname (create-type (name '~tname) ~@params)))

(defn identity (x) x)

(defn string ((k : Keyword)) (+ ":" (name k))
             ((s : Symbol))  (name s)
             ((s : String))  (+ "\"" s "\"")
             ((n : Number))  (+ n "")
             ((a : Array))   (sequence-string* a)
             ((l : List))    (sequence-string* l)
             (x) (string* x))
;            ((a : Array))   (+ "(" (join (map string a) " ") ")")
;            ((l : List))    (+ "(" (join (map string l) " ") ")"))

(defn print (x) (log* (string x)))


;; Lists

(deft List ()
           (head tail))

(def nil (List))


;; Sequences

(defn first ((a : Array)) (array-first* a)
            ((List h t)) h)
(defn rest ((a : Array)) (array-rest* a)
           ((List h t)) t
           ((List)) nil)
