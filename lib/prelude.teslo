(def defm (macro (name signature body) `(def ~name (macro ~signature ~body))))

(defm defn (name . signatures) `(def ~name (fn ~@signatures)))

(defm deft (tname . params) `(def ~tname (create-type (name '~tname) ~@params)))

(defm do (. x) `((fn (. x) (last x)) ~@x))

(defn identity (x) x)

(defn inc (x) (+ x 1))

(defn dec (x) (- x 1))

(defn string ((k : Keyword)) (+ ":" (name k))
             ((s : Symbol))  (name s)
             ((s : String))  (+ "\"" s "\"")
             ((n : Number))  (+ n "")
             ((l : List))    (+ "(" (join (map string l) " ") ")")
             ((a : Array))   (+ "(" (join (map string a) " ") ")")
             (x)             (string* x string))

(defn print (x) (log* (string x)))


;; Lists

(deft List ()
           (head tail))

(def nil (List))


;; Sequences

(defn first ((a : Array)) (array-first* a)
            ((List h t)) h)

(defn rest ((a : Array)) (array-rest* a)
           ((List h t))  t
           ((List))      nil)

(defn last ((a : Array))     (array-last* a)
           ((List h (List))) h
           ((List h t))      (last t))

(defn length ((a : Array)) (array-length* a)
             ((List h t))  (+ 1 (length t))
             ((List))      0)

(defn map (f (List h t))  (List (f h) (map f t))
          (f (List))      nil
          (f (a : Array)) (match (array-length* a)
                                 0    nil
                                 else (let (h (first a)
                                            t (rest a))
                                        (List (f h) (map f t)))))

(defn reduce (f a (List h t)) (reduce f (f a h) t)
             (f a (List))     a)

(defn join ((List h t) sep) (reduce (fn (a h*) (+ a sep h*)) h t)
           ((List) sep) "")
