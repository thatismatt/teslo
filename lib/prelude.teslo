(def defm (macro (name signature body) `(def ~name (macro ~signature ~body))))

(defm defn (name . signatures) `(def ~name (fn ~@signatures)))

(defm deft (tname . params) `(def ~tname (create-type (name ~tname) ~@params)))

(defn identity (x) x)


;; Sequences

(defn first ((a : Array)) (array-first* a)
            ((List h t)) h)


;; Lists

(deft List ()
           (head tail))

(def nil (List))

;; (defn rest (List h t) t
;;            (List) nil)
