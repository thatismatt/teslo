(def defm (macro (name signature body) `(def ~name (macro ~signature ~body))))

(defm defn (name signature body) `(def ~name (fn ~signature ~body)))

(defm deft (tname . params) `(def ~tname (create-type (name ~tname) ~@params)))

(defn identity (x) x)

(deft List ()
           (head tail))

;; (def nil (List))
;; (defn first (List h t) h)
;; (def rest (fn (l) (match l (List h t) t
;;                            (List) nil)))
